
#specify your compiler
CC	= gcc
C	= c

#first set up the platform dependent variables
#you could also add another ifeq entry for your own platform
ifeq ("$(shell uname)", "Darwin")
  #Note that these paths are based on installing OpenImageIO with
  #homebrew, hence there are no needs for the include paths
  OIIO_INC = -I/Users/Xin/openglex/GLUS/src
  OIIO_LIB = -L/Users/Xin/openglex/GLUS/build -lGLUS
  GLFW3_INC = -I/usr/local/include
  GLFW3_LIB = -L/usr/local/lib -lGLFW3 -lGLEW
  GLFW_INC = -I/Users/Xin/openglex/External/x64/Darwin/GCC/include
  GLFW_LIB = -L/Users/Xin/openglex/External/x64/Darwin/GCC/lib -lGLEW
  OPENGL_LIB = -framework Foundation -framework GLUT -framework OpenGL
else 
  ifeq ("$(shell uname)", "Linux")
    #On SoC machines, we need to specifically include the OIIO include
    #path in addition to the lib paths
    OIIO_INC = -I/group/dpa/include
    OIIO_LIB = -L/group/dpa/lib -lOpenImageIO
    OPENGL_LIB = -lglut -lGL -lGLU
  endif
endif

#build the LDFLAG snd CFLAGS based on variables above
LDFLAGS = $(OPENGL_LIB) $(OIIO_LIB) $(GLFW3_LIB)
CFLAGS = -g $(OIIO_INC) $(GLFW3_INC)

#this will be the name of your executable
PROJECT = main

#list a .o file for each .cpp file that you will compile
#this makefile will compile each cpp separately before linking
OBJECTS = main.o renderBackground.o renderWaterTexture.o

#this target does the linking step  
all: ${PROJECT} 

${PROJECT}: ${OBJECTS}
	${CC} ${CFLAGS} -o ${PROJECT} ${OBJECTS} ${LDFLAGS}

#this target generically compiles each .cpp to a .o file
#it does not check for .h files dependencies, but you could add that
%.o: %.c
	${CC} -c ${CFLAGS} *.${C}

#this will clean up all temporary files created by make all
clean:
	rm -f core.* *.o *~ ${PROJECT}